import os
import requests
import sys
import csv
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from dotenv import load_dotenv

def getGoogleSheet(spreadsheet_id, outDir, outFile):
    url = f'https://docs.google.com/spreadsheets/d/{spreadsheet_id}/export?format=csv'
    response = requests.get(url)
    if response.status_code == 200:
        filepath = os.path.join(outDir, outFile)
        with open(filepath, 'wb') as f:
            f.write(response.content)
        print('CSV file saved to: {}'.format(filepath))
    else:
        print(f'Error downloading Google Sheet: {response.status_code}')
        sys.exit(1)

def send_email(to_email, subject, body):
    smtp_server = os.getenv('SMTP_SERVER')
    smtp_port = int(os.getenv('SMTP_PORT'))
    smtp_username = os.getenv('SMTP_USERNAME')
    smtp_password = os.getenv('SMTP_PASSWORD')
    # Email configuration
    sender_email = 'abcd@gmail.com'
    message = MIMEMultipart()
    message['From'] = sender_email
    message['To'] = to_email
    message['Subject'] = subject


    message.attach(MIMEText(body, 'html'))  

    with smtplib.SMTP(smtp_server, smtp_port) as server:
        server.starttls()
        server.login(smtp_username, smtp_password)
        server.sendmail(sender_email, to_email, message.as_string())


#path
outDir = '------------' 
os.makedirs(outDir, exist_ok=True)

spreadsheet_id = '--------------' 
#insert spreadsheet id
outFile = "Am_report_automation_1.csv"


getGoogleSheet(spreadsheet_id, outDir, outFile)

#path
script_dir = os.path.dirname(os.path.abspath(__file__))
dotenv_path = '-------------' 
load_dotenv(dotenv_path)


csv_file_path = os.path.join(outDir, outFile)
with open(csv_file_path, mode='r') as file:
    reader = csv.DictReader(file)
    data = list(reader)


grouped_rows = {}
for row in data:
    if row['Send_email_to_AM'] == 'Yes':
        am_email = row['AM_Email']
        if am_email not in grouped_rows:
            grouped_rows[am_email] = []
        grouped_rows[am_email].append(row)

# ...

for am_email, rows in grouped_rows.items():
    body = f"""
    <p>Dear Concern,</p>
    <p>Please take necessary action on the issues</p>
    <table border="1" cellpadding="5" style="border-collapse: collapse; text-align: center;">
        <tr>
            {"".join(f"<th>{key.replace('_', ' ')}</th>" for key in rows[0].keys() if key not in ['drop_percentage_comp', 'Send_email_to_POC', 'POC_Name', 'POC_Email','last_week','prior_last_week'])}
        </tr>
        {"".join("<tr>" + "".join(f"<td style='background-color: {'red' if key == 'drop_percentage' and float(row['_drop_percentage_comp']) <= -50 else 'white'}; color: black; text-align: center;'>{value}</td>" for key, value in row.items() if key not in ['GMV_drop_percentage_comp', 'Send_email_to_AM', 'AM_Name', 'AM_Email','last_week','prior_last_week']) + "</tr>" for row in rows)}
    </table>
    <p style="font-weight: bold; text-align: left;">
    Best regards,<br>
    Data Analytics Team<br>
    <span style="color: #D70F64;">foodpanda</span>
    </p>
    """

    last_week_number = rows[0]['last_week'].split('_')[-1]
    prior_last_week_number = rows[0]['prior_last_week'].split('_')[-1]

    body = body.replace("GMV_last_week", f"Sale BDT- Week {last_week_number}")
    body = body.replace("GMV_prior_last_week", f"GMV Gross BDT- Week {prior_last_week_number}")

    
    subject = "ðŸš¨ðŸš¨ðŸš¨ Take steps immediately"
    send_email(am_email, subject, body)
    print(f"Email sent to {am_email}")



   
